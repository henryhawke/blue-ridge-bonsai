import { webMethod, Permissions } from "wix-web-module";
import { members } from "wix-members-backend";
import { authorization } from "wix-members-backend";
import wixData from "wix-data";
import { groups } from "wix-groups-backend";
import wixUsers from "wix-users-backend";

import { PRIMARY_GROUP_ID, PRIMARY_GROUP_SLUG } from "backend/config/user-management.config";

let cachedGroupId = PRIMARY_GROUP_ID || null;
let resolvingGroupPromise = null;

async function resolvePrimaryGroupId() {
  if (cachedGroupId) {
    return cachedGroupId;
  }

  if (!groups) {
    return null;
  }

  if (resolvingGroupPromise) {
    return resolvingGroupPromise;
  }

  resolvingGroupPromise = (async () => {
    try {
      if (PRIMARY_GROUP_SLUG && typeof groups.getGroup === "function") {
        const group = await groups.getGroup({ slug: PRIMARY_GROUP_SLUG });
        if (group?._id) {
          cachedGroupId = group._id;
          return cachedGroupId;
        }
      }

      if (typeof groups.queryGroups === "function") {
        const query = groups.queryGroups();
        if (PRIMARY_GROUP_SLUG) {
          query.eq("slug", PRIMARY_GROUP_SLUG);
        }
        const result = await query.limit(1).find();
        const match = result?.items?.[0];
        if (match?._id) {
          cachedGroupId = match._id;
          return cachedGroupId;
        }
      }

      if (typeof groups.listGroups === "function") {
        const result = await groups.listGroups();
        const items = Array.isArray(result?.items)
          ? result.items
          : Array.isArray(result?.groups)
          ? result.groups
          : [];
        const match = PRIMARY_GROUP_SLUG
          ? items.find((group) => group?.slug === PRIMARY_GROUP_SLUG)
          : items[0];
        if (match?._id) {
          cachedGroupId = match._id;
          return cachedGroupId;
        }
      }
    } catch (error) {
      console.warn("Unable to resolve primary Wix Group ID", error);
    } finally {
      resolvingGroupPromise = null;
    }

    return null;
  })();

  return resolvingGroupPromise;
}

async function ensureMemberInPrimaryGroup(memberId) {
  if (!memberId || !groups) {
    return;
  }

  try {
    const groupId = await resolvePrimaryGroupId();
    if (!groupId) {
      return;
    }

    if (typeof groups.addMemberToGroup === "function") {
      await groups.addMemberToGroup({ groupId, memberId });
      return;
    }

    if (typeof groups.inviteMemberToGroup === "function") {
      await groups.inviteMemberToGroup({ groupId, memberId, suppressEmail: true });
      return;
    }

    if (typeof groups.assignMemberToGroup === "function") {
      await groups.assignMemberToGroup({ groupId, memberId });
    }
  } catch (error) {
    console.warn("Failed to synchronize member with Wix Group", error);
  }
}

function mapGroupMemberToDirectory(member) {
  if (!member) {
    return null;
  }

  const profile = member.profile || member.contact || {};
  const firstName = member.firstName || profile.firstName || "";
  const lastName = member.lastName || profile.lastName || "";
  const email = member.email || profile.email || "";
  const phone = member.phone || profile.phone || null;

  return {
    _id: member._id || member.memberId || member.id,
    name: `${firstName} ${lastName}`.trim(),
    email,
    phone,
    membershipLevel: member.role?.name || member.membershipLevel || "Member",
    joinDate: member.joinDate || member.createdDate || member.createdAt || null,
  };
}

async function memberExistsByEmail(email) {
  if (!email) {
    return false;
  }

  try {
    if (members && typeof members.queryMembers === "function") {
      const result = await members
        .queryMembers()
        .eq("loginEmail", email)
        .limit(1)
        .find();
      if (result?.items?.length) {
        return true;
      }
    }
  } catch (error) {
    console.warn("Wix Members email lookup failed, checking custom data collection.", error);
  }

  try {
    const [direct, login] = await Promise.all([
      wixData.query("Members").eq("email", email).limit(1).find(),
      wixData.query("Members").eq("loginEmail", email).limit(1).find(),
    ]);
    return direct.items.length > 0 || login.items.length > 0;
  } catch (error) {
    console.warn("Fallback email lookup in Members collection failed.", error);
    return false;
  }
}

async function fetchExtendedMemberRecord(memberId) {
  if (!memberId) {
    return null;
  }

  try {
    return await wixData.get("Members", memberId);
  } catch (error) {
    return null;
  }
}

async function getWixMemberById(memberId) {
  if (!memberId || !members) {
    return null;
  }

  try {
    if (typeof members.getMember === "function") {
      const result = await members.getMember({ memberId });
      if (result?.member) {
        return result.member;
      }
      return result || null;
    }
  } catch (error) {
    console.warn("Failed to retrieve Wix member by ID", error);
  }

  return null;
}

export const approveMemberApplication = webMethod(
  Permissions.Admin,
  async (applicationId) => {
    try {
      // Get application
      const application = await wixData.get(
        "MemberApplications",
        applicationId
      );
      if (!application) {
        throw new Error("Application not found.");
      }

      // Create Wix member account
      const newMember = await members.createMember({
        email: application.email,
        contactDetails: {
          firstName: application.firstName,
          lastName: application.lastName,
          phone: application.phone,
        },
      });

      // Create extended member profile
      const memberProfile = {
        _id: newMember.member._id,
        ...application,
        isActive: true,
        approvalDate: new Date(),
        status: "approved",
      };

      await wixData.insert("Members", memberProfile);

      await ensureMemberInPrimaryGroup(newMember.member._id);

      // Update application status
      await wixData.update("MemberApplications", {
        _id: applicationId,
        status: "approved",
        memberId: newMember.member._id,
        approvalDate: new Date(),
      });

      return { success: true, memberId: newMember.member._id };
    } catch (error) {
      console.error("Error approving member application:", error);
      throw error;
    }
  }
);

export const getMemberDirectory = webMethod(
  Permissions.SiteMember,
  async () => {
    try {
      const groupId = await resolvePrimaryGroupId();
      if (groupId && groups && typeof groups.listGroupMembers === "function") {
        const result = await groups.listGroupMembers({ groupId });
        const items = Array.isArray(result?.items)
          ? result.items
          : Array.isArray(result?.members)
          ? result.members
          : [];
        const mapped = items.map(mapGroupMemberToDirectory).filter(Boolean);
        if (mapped.length) {
          return mapped;
        }
      }

      if (members && typeof members.queryMembers === "function") {
        const result = await members.queryMembers().ascending("profile.lastName").find();
        const mapped = Array.isArray(result?.items)
          ? result.items.map(mapGroupMemberToDirectory).filter(Boolean)
          : [];
        if (mapped.length) {
          return mapped;
        }
      }
    } catch (error) {
      console.warn("Primary member directory lookup failed, falling back to custom collection.", error);
    }

    const membersList = await wixData
      .query("Members")
      .eq("isActive", true)
      .ascending("lastName")
      .find();

    return membersList.items.map((member) => ({
      _id: member._id,
      name: `${member.firstName} ${member.lastName}`,
      email: member.email,
      phone: member.phone,
      membershipLevel: member.membershipLevel,
      joinDate: member.joinDate,
    }));
  }
);
/**
 * Gets all active membership levels
 */
export async function getMembershipLevels() {
  try {
    const levels = await wixData
      .query("MembershipLevels")
      .eq("isActive", true)
      .ascending("sortOrder")
      .find();

    return levels.items;
  } catch (error) {
    console.error("Error getting membership levels:", error);
    // Safe fallback when collection is missing in dev/sandbox
    const fallback = [
      { _id: "basic", name: "Basic", price: 35, isActive: true, sortOrder: 1 },
      {
        _id: "family",
        name: "Family",
        price: 60,
        isActive: true,
        sortOrder: 2,
      },
      {
        _id: "student",
        name: "Student",
        price: 20,
        isActive: true,
        sortOrder: 3,
      },
    ];
    return fallback;
  }
}

/**
 * Submits a new member application
 */
export async function submitMemberApplication(applicationData) {
  try {
    // Basic validation
    if (
      !applicationData.email ||
      !applicationData.firstName ||
      !applicationData.lastName
    ) {
      throw new Error("Email, first name, and last name are required.");
    }

    // Check if member already exists
    if (await memberExistsByEmail(applicationData.email)) {
      throw new Error("A member with this email already exists.");
    }

    // Create the application record
    const newApplication = {
      ...applicationData,
      applicationDate: new Date(),
      status: "pending_payment",
      source: "website_application",
    };

    const result = await wixData.insert("MemberApplications", newApplication);

    // Send confirmation email
    await sendApplicationConfirmation(
      applicationData.email,
      applicationData.firstName
    );

    return result;
  } catch (error) {
    console.error("Error submitting application:", error);
    throw error;
  }
}

/**
 * Gets the current member's profile
 */
export async function getCurrentMemberProfile() {
  try {
    const currentAuthMember = authorization?.currentMember || null;
    let memberId = currentAuthMember?._id || currentAuthMember?.id || null;
    let loginEmail = currentAuthMember?.loginEmail || null;

    const currentUser = wixUsers?.currentUser;
    if (!memberId && currentUser) {
      memberId = currentUser.id || currentUser._id || null;
      loginEmail = loginEmail || currentUser.email;
    }

    if (!memberId && loginEmail && members && typeof members.queryMembers === "function") {
      try {
        const lookup = await members
          .queryMembers()
          .eq("loginEmail", loginEmail)
          .limit(1)
          .find();
        const wixMember = lookup?.items?.[0];
        if (wixMember?._id) {
          memberId = wixMember._id;
        }
      } catch (error) {
        console.warn("Unable to resolve member ID from Wix Members query", error);
      }
    }

    if (!memberId && !loginEmail) {
      return null;
    }

    const [wixMember, extendedProfile] = await Promise.all([
      getWixMemberById(memberId),
      fetchExtendedMemberRecord(memberId || null),
    ]);

    if (!wixMember && !extendedProfile) {
      if (loginEmail) {
        const fallbackQuery = await wixData
          .query("Members")
          .eq("loginEmail", loginEmail)
          .limit(1)
          .find();
        return fallbackQuery.items[0] || null;
      }
      return null;
    }

    const baseProfile = wixMember?.profile || wixMember || {};

    return {
      _id: memberId || baseProfile._id || extendedProfile?._id || null,
      loginEmail: loginEmail || baseProfile.loginEmail || extendedProfile?.loginEmail || baseProfile.email,
      email: extendedProfile?.email || baseProfile.email || loginEmail || '',
      firstName: extendedProfile?.firstName || baseProfile.firstName || baseProfile.name?.first || '',
      lastName: extendedProfile?.lastName || baseProfile.lastName || baseProfile.name?.last || '',
      phone: extendedProfile?.phone || baseProfile.phone || '',
      ...baseProfile,
      ...extendedProfile,
    };
  } catch (error) {
    console.error("Error getting current member profile:", error);
    return null;
  }
}

/**
 * Checks membership status
 */
export async function checkMembershipStatus() {
  try {
    const member = await getCurrentMemberProfile();
    if (!member) {
      return {
        isActive: false,
        needsRenewal: false,
        daysUntilExpiry: 0,
        isExpired: true,
      };
    }

    const now = new Date();
    const expirationDate = new Date(member.expirationDate);
    const diffTime = expirationDate.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    return {
      isActive: member.isActive && diffDays > 0,
      needsRenewal: diffDays <= 30 && diffDays > 0,
      daysUntilExpiry: diffDays > 0 ? diffDays : 0,
      isExpired: diffDays <= 0,
      levelName: member.membershipLevel,
      memberId: member._id,
    };
  } catch (error) {
    console.error("Error checking membership status:", error);
    return {
      isActive: false,
      needsRenewal: false,
      daysUntilExpiry: 0,
      isExpired: true,
    };
  }
}

/**
 * Sends application confirmation email
 */
async function sendApplicationConfirmation(email, firstName) {
  try {
    await sendEmail({
      to: email,
      subject: "Welcome to Blue Ridge Bonsai Society - Application Received",
      body: `
        Dear ${firstName},
        
        Thank you for your application to join the Blue Ridge Bonsai Society!
        
        We have received your application and will review it shortly. You will receive 
        payment instructions within 24-48 hours.
        
        If you have any questions, please don't hesitate to contact us.
        
        Best regards,
        The Blue Ridge Bonsai Society Team
      `,
    });
  } catch (error) {
    console.error("Error sending confirmation email:", error);
  }
}

/**
 * Gets all members (admin function)
 */
export async function getAllMembers() {
  try {
    if (members && typeof members.queryMembers === "function") {
      const result = await members.queryMembers().ascending("profile.lastName").find();
      if (Array.isArray(result?.items) && result.items.length) {
        return result.items.map((item) => ({
          _id: item._id || item.id,
          ...item.profile,
          ...item,
        }));
      }
    }

    const legacyMembers = await wixData.query("Members").ascending("lastName").find();

    return legacyMembers.items;
  } catch (error) {
    console.error("Error getting all members:", error);
    return [];
  }
}

/**
 * Gets pending applications (admin function)
 */
export async function getPendingApplications() {
  try {
    const applications = await wixData
      .query("MemberApplications")
      .eq("status", "pending_payment")
      .descending("applicationDate")
      .find();

    return applications.items;
  } catch (error) {
    console.error("Error getting pending applications:", error);
    return [];
  }
}
